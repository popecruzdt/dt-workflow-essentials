[{"id":"1","name":"Prerequisites","content":"<h2 id=\"prerequisites\">Prerequisites</h2>\n<h3 id=\"environmentsetup\">Environment Setup</h3>\n<ol>\n<li>Workflow Settings - Authorization</li>\n<li>Slack for Workflows</li>\n<li>Config Generator</li>\n<li>Data Generator</li>\n</ol>","activityList":[{"id":"1.1","name":"Workflow Settings - Authorization","content":"<h2 id=\"workflowsettingsauthorization\">Workflow Settings - Authorization</h2>\n<p>To run a workflow with your user as the actor (this is the default on workflow creation), you need to authorize the AutomationEngine to use permissions in your name. Note: The AutomationEngine authorization only works for permissions granted to your user.</p>\n<p>In your Dynatrace environment, open the Workflows App.</p>\n<p>Validate that the following permissions are granted to workflow executions.</p>\n<p><img src=\"assets/01-workflow-authorization-settings.png\" alt=\"assets/01-workflow-authorization-settings.png\" /></p>\n<p>Primary permissions:</p>\n<p>[ x ] app-engine:apps:run - Grants permission to list and run apps and gives basic access to the Launcher</p>\n<p>[ x ] app-engine:functions:run - Grants permission to use the function-executor</p>\n<p>[ x ] app-settings:objects:read - Grants permission to read app settings objects belonging to the schema</p>\n<p>Secondary permissions:</p>\n<p>[ x ] select all</p>","activityList":[]},{"id":"1.2","name":"Slack for Workflows","content":"<h2 id=\"slackforworkflows\">Slack for Workflows</h2>\n<p>In your Dynatrace environment, search, locate, and open the Hub App.</p>\n<p>Search for the App <code>Slack for Workflows</code> and click on it.</p>\n<p><img src=\"assets/01-hub-slack-workflows.png\" alt=\"assets/01-hub-slack-workflows.png\" /></p>\n<p>Click on Install to install the App into your environment.</p>\n<p>Close any notification prompts if necessary.</p>\n<p>Validate that the App was installed into your environment.</p>\n<p><img src=\"assets/01-slack-workflows-install.png\" alt=\"assets/01-slack-workflows-install.png\" /></p>","activityList":[]},{"id":"1.3","name":"Config Generator","content":"<h2 id=\"configgenerator\">Config Generator</h2>\n<p>In your Dynatrace environment, open the Workflows App.</p>\n<p>Import the workflow 'Workflow Essentials - Config Generator' using the source file <a href=\"https://github.com/popecruzdt/dt-workflow-essentials/blob/main/assets/dt_wftpl_workflow_essentials_config_generator.yaml\"><code>dt_wftpl_workflow_essentials_config_generator.yaml</code></a></p>\n<p>Workflows are imported using the Upload button.</p>\n<p><img src=\"assets/01-import-config-generator.png\" alt=\"assets/01-import-config-generator.png\" /></p>\n<p>Locate the <code>js_set_parameters</code> task.  Locate the code snippet for the Slack connection.</p>\n<p>Set the <code>CONNECTION_TOKEN</code> value to the Slack App Bot User Token you have been provided (or have created).</p>\n<p><img src=\"assets/01-config-generator-set-parameters.png\" alt=\"assets/01-config-generator-set-parameters.png\" /></p>\n<p>Run the workflow and validate that it runs successfully.</p>\n<p><img src=\"assets/01-config-generator-execution.png\" alt=\"assets/01-config-generator-execution.png\" /></p>\n<p>As a result of the workflow, three configurations have been made to the Dynatrace environment:</p>\n<ol>\n<li>A credential vault entry has been added containing a Dynatrace API token<ul>\n<li>Copy the credential vault ID from the result of the <code>js_create_credential</code> task and store it in your notes somewhere, it is needed in a future exercise</li></ul></li>\n<li>The allow list for outbound connections has been updated with the hosts/domains required for this lab<ul>\n<li>No action required, simply verify using screenshot below</li></ul></li>\n<li>A Slack Connection has been created called <code>workflow_essentials_demo</code><ul>\n<li>No action required, simply verify using screenshot below</li></ul></li>\n</ol>\n<p><img src=\"assets/01-config-generator-results.png\" alt=\"assets/01-config-generator-results.png\" /></p>","activityList":[]},{"id":"1.4","name":"Data Generator","content":"<h2 id=\"datagenerator\">Data Generator</h2>\n<p>In your Dynatrace environment, open the Workflows App.</p>\n<p>Import the workflow 'Workflow Essentials - Data Generator' using the source file <a href=\"https://github.com/popecruzdt/dt-workflow-essentials/blob/main/assets/dt_wftpl_workflow_essentials_data_generator.yaml\"><code>dt_wftpl_workflow_essentials_data_generator.yaml</code></a></p>\n<p>Workflows are imported using the Upload button.</p>\n<p><img src=\"assets/01-import-data-generator.png\" alt=\"assets/01-import-data-generator.png\" /></p>\n<p>No changes are required.  The workflow is scheduled to run every 5 minutes.</p>\n<p><img src=\"assets/01-data-generator-workflow.png\" alt=\"assets/01-data-generator-workflow.png\" /></p>\n<p>This workflow will generate bizevents representing a multi-stage business process.  This data will be used by the other workflows in the lab, removing the requirement to deploy OneAgents or ingest data through other mechanisms.</p>","activityList":[]}]},{"id":"2","name":"Workflow Essentials","content":"<h2 id=\"workflowessentials\">Workflow Essentials</h2>\n<p>Goal: Utilize essential Workflow techniques applicable to most use cases.</p>\n<ul>\n<li>Parameters and Task Results<ul>\n<li>Parameter Task – define parameters/variables that will be used by subsequent tasks</li>\n<li>Parameter Task Output – return parameters for subsequent tasks</li>\n<li>Accessing Parameter Task Results – access the parameters from result of the task</li></ul></li>\n<li>Fetch API<ul>\n<li>HTTP GET  (Dynatrace Status.io) – bring external data into Dynatrace workflows</li>\n<li>HTTP POST  (Webhook.Site) – send data to external systems from Dynatrace workflows</li></ul></li>\n<li>Looping Tasks<ul>\n<li>DQL Query – execute a DQL query that returns multiple records/rows</li>\n<li>Looping Over Results – perform logic against each DQL record/row</li></ul></li>\n</ul>","activityList":[{"id":"2.1","name":"Parameters and Task Results","content":"<h2 id=\"parametersandtaskresults\">Parameters and Task Results</h2>\n<p>Begin by creating a new Workflow in the Workflows App within your Dynatrace environment.</p>\n<p><em>Remember to save progress often!</em></p>\n<p>Select a trigger: choose <code>On demand trigger</code></p>\n<p><img src=\"assets/02-workflow-trigger-type.png\" alt=\"assets/02-workflow-trigger-type.png\" /></p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p><img src=\"assets/02-add-first-action.png\" alt=\"assets/02-add-first-action.png\" /></p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p><img src=\"assets/02-set-parameters-choose-action.png\" alt=\"assets/02-set-parameters-choose-action.png\" /></p>\n<h4 id=\"js_set_parameters\"><code>js_set_parameters</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_set_parameters\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Set the parameters for this workflow\n</code></pre>\n<p>This will be the task/action that defines the parameters/variables that will be used by subsequent tasks and returns them in the result.  By setting the parameters as nested attribute key:value pairs within a single variable, as additional parameters are needed they can easily be added without modifying any other code.</p>\n<p>Set the task name and description respectively.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\">export default async function () {\n\n  let PARAMETERS = {\n\n    <span class=\"hljs-comment\">// INITIALS - the initials of the user for this lab</span>\n<span class=\"hljs-symbol\">    INITIALS:</span> <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-comment\">// i.e. INITIALS: &quot;TPC&quot;; the intials of the user for this lab are TPC</span>\n\n    <span class=\"hljs-comment\">// LOCATION - the city and country of the user for this lab</span>\n<span class=\"hljs-symbol\">    LOCATION:</span> <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-comment\">// i.e. LOCATION: &quot;Dallas, United States&quot;;</span>\n\n    <span class=\"hljs-comment\">// TENURE - the number of years of tenure of the user for this lab</span>\n<span class=\"hljs-symbol\">    TENURE:</span> <span class=\"hljs-meta\">##, <span class=\"hljs-comment\">// i.e. TENURE: 14; the user for this lab has 14 years of tenure</span></span>\n\n    <span class=\"hljs-comment\">// STATUS_URL - the URL of the dynatrace status.io API</span>\n<span class=\"hljs-symbol\">    STATUS_URL:</span> <span class=\"hljs-string\">&quot;https://api.status.io/1.0/status/546d8cb6af8407b6730000cb&quot;</span>, <span class=\"hljs-comment\">// i.e. STATUS_URL: &quot;https://api.status.io/1.0/status/546d8cb6af8407b6730000cb&quot;</span>\n\n    <span class=\"hljs-comment\">// WEBHOOK_URL- the URL of the webhook.site unique endpoint</span>\n<span class=\"hljs-symbol\">    WEBHOOK_URL:</span> <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-comment\">// i.e. WEBHOOK_URL: &quot;https://webhook.site/18637ec8-fcf9-43ec-86bf-993626982c6c&quot;</span>\n\n  }\n\n  return PARAMETERS;\n}\n</code></pre>\n<p>Set the value of the missing variables:</p>\n<ul>\n<li>INITIALS: your initials</li>\n<li>LOCATION: your location</li>\n<li>TENURE: the number of years you've been with the company</li>\n<li>WEBHOOK_URL:<ul>\n<li>Navigate in your incognito browser window to https://webhook.site/ and copy your unique URL</li>\n<li>The unique URL is located at the top of the page, not in your browser's address bar</li></ul></li>\n</ul>\n<p><img src=\"assets/02-set-parameters-input.png\" alt=\"assets/02-set-parameters-input.png\" /></p>\n<h4 id=\"js_output_parameters\"><code>js_output_parameters</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_output_parameters\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Output the parameters from the previous task\n</code></pre>\n<p>This will be the task/action that accesses the parameters from the previous tasks results.  This will demonstrate how to do this within JS code.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p>Set the task name and description respectively.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> { execution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> PARAMETERS_TASK = <span class=\"hljs-string\">&#x27;js_set_parameters&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id }</span>) </span>{\n\n  <span class=\"hljs-comment\">// get parameters from previous tasks</span>\n  <span class=\"hljs-comment\">// execution</span>\n  <span class=\"hljs-keyword\">const</span> ex = <span class=\"hljs-keyword\">await</span> execution(execution_id);\n  <span class=\"hljs-comment\">// parameters</span>\n  <span class=\"hljs-keyword\">const</span> parameters = <span class=\"hljs-keyword\">await</span> ex.result(PARAMETERS_TASK);\n\n  <span class=\"hljs-comment\">// log the parameters</span>\n  <span class=\"hljs-built_in\">console</span>.log(parameters);\n\n  <span class=\"hljs-comment\">// declare new variables to easily access the parameters within this task</span>\n  <span class=\"hljs-keyword\">const</span> INITIALS = parameters[<span class=\"hljs-string\">&#x27;INITIALS&#x27;</span>];\n  <span class=\"hljs-keyword\">const</span> LOCATION = parameters[<span class=\"hljs-string\">&#x27;LOCATION&#x27;</span>];\n  <span class=\"hljs-keyword\">const</span> TENURE = parameters[<span class=\"hljs-string\">&#x27;TENURE&#x27;</span>];\n\n  <span class=\"hljs-comment\">// return a string that contains the parameters</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;The lab user &quot;</span> + INITIALS + <span class=\"hljs-string\">&quot;, is located in &quot;</span> + LOCATION + <span class=\"hljs-string\">&quot;.  They have &quot;</span> + TENURE + <span class=\"hljs-string\">&quot; years of tenure.&quot;</span>;\n\n}\n</code></pre>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_set_parameters</code> is <code>success</code></p>\n<p><img src=\"assets/02-output-parameters-input.png\" alt=\"assets/02-output-parameters-input.png\" /></p>\n<p>Run the workflow and validate the results</p>\n<p><img src=\"assets/02-output-parameters-results.png\" alt=\"assets/02-output-parameters-results.png\" /></p>","activityList":[]},{"id":"2.2","name":"Fetch API","content":"<h2 id=\"fetchapi\">Fetch API</h2>\n<h4 id=\"js_fetch_status_io\"><code>js_fetch_status_io</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_fetch_status_io\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Read dynatrace status.io using fetch api\n</code></pre>\n<p>This will be the task/action that uses the <code>fetch()</code> api to make an HTTP call to the Dynatrace status.io api.  This will demonstrate how to make HTTP calls using JS code, in order to bring in external data.</p>\n<p>Locate the <code>js_set_parameters</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p>Set the task name and description respectively.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> { execution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> PARAMETERS_TASK = <span class=\"hljs-string\">&#x27;js_set_parameters&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id }</span>) </span>{\n\n  <span class=\"hljs-comment\">// get parameters from previous tasks</span>\n  <span class=\"hljs-comment\">// execution</span>\n  <span class=\"hljs-keyword\">const</span> ex = <span class=\"hljs-keyword\">await</span> execution(execution_id);\n  <span class=\"hljs-comment\">// parameters</span>\n  <span class=\"hljs-keyword\">const</span> parameters = <span class=\"hljs-keyword\">await</span> ex.result(PARAMETERS_TASK);\n  <span class=\"hljs-comment\">// STATUS_URL</span>\n  <span class=\"hljs-keyword\">const</span> STATUS_URL = parameters[<span class=\"hljs-string\">&#x27;STATUS_URL&#x27;</span>];\n\n  <span class=\"hljs-comment\">// set the fetch() api parameters [method, headers, body]</span>\n  <span class=\"hljs-comment\">// https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</span>\n  <span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;GET&quot;</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-string\">&#x27;accept&#x27;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span>,\n    }\n  };\n\n  <span class=\"hljs-comment\">// execute the fetch() api call</span>\n  <span class=\"hljs-comment\">// set the url parameter equal to the status.io url parameter</span>\n  <span class=\"hljs-keyword\">const</span> url = STATUS_URL;\n  <span class=\"hljs-comment\">// make the fetch call, passing the url and options, capture the response</span>\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetch(url,options);\n  <span class=\"hljs-comment\">// parse the json response as a new variable</span>\n  <span class=\"hljs-keyword\">const</span> response_json = <span class=\"hljs-keyword\">await</span> response.json();\n  <span class=\"hljs-comment\">// return the json response</span>\n  <span class=\"hljs-keyword\">return</span> response_json;\n}\n</code></pre>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_set_parameters</code> is <code>success</code></p>\n<p>Additionally, we only want this task to run if the <code>STATUS_URL</code> parameter is defined in the previous task.  We can access the result using a Jinja expression:</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-number\">1.</span> {{ result(<span class=\"hljs-string\">&quot;task_name&quot;</span>) }}\n<span class=\"hljs-number\">2.</span> {{ result(<span class=\"hljs-string\">&quot;task_name&quot;</span>)[<span class=\"hljs-string\">&#x27;result_attribute_name&#x27;</span>] }}\n<span class=\"hljs-number\">3.</span> {{ result(<span class=\"hljs-string\">&quot;task_name&quot;</span>)[<span class=\"hljs-string\">&#x27;result_attribute_name&#x27;</span>] condition expression }}\n</code></pre>\n<p><a href=\"https://docs.dynatrace.com/docs/platform-modules/automations/workflows/reference\">Expression Reference Documentation</a></p>\n<p>Set the <code>And custom condition was met</code>:</p>\n<pre><code class=\"hljs js language-js\">{{ result(<span class=\"hljs-string\">&quot;js_set_parameters&quot;</span>)[<span class=\"hljs-string\">&#x27;STATUS_URL&#x27;</span>] is defined }}\n</code></pre>\n<p><img src=\"assets/02-fetch-status-io-input.png\" alt=\"assets/02-fetch-status-io-input.png\" /></p>\n<hr />\n<h4 id=\"js_fetch_webhook_site\"><code>js_fetch_webhook_site</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_fetch_webhook_site\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Send json content to webhook.site using fetch api\n</code></pre>\n<p>This will be the task/action that uses the <code>fetch()</code> api to make an HTTP call to webhook.site, a free webhook testing tool.  This will demonstrate how to make HTTP calls using JS code, in order to send data from workflows to external systems.</p>\n<p>Locate the <code>js_fetch_status_io</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p>Set the task name and description respectively.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> { execution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> PARAMETERS_TASK = <span class=\"hljs-string\">&#x27;js_set_parameters&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> FETCH_STATUS_TASK = <span class=\"hljs-string\">&#x27;js_fetch_status_io&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id }</span>) </span>{\n\n  <span class=\"hljs-comment\">// get parameters from previous tasks</span>\n  <span class=\"hljs-comment\">// execution</span>\n  <span class=\"hljs-keyword\">const</span> ex = <span class=\"hljs-keyword\">await</span> execution(execution_id);\n  <span class=\"hljs-comment\">// parameters</span>\n  <span class=\"hljs-keyword\">const</span> parameters = <span class=\"hljs-keyword\">await</span> ex.result(PARAMETERS_TASK);\n  <span class=\"hljs-comment\">// WEBHOOK_URL</span>\n  <span class=\"hljs-keyword\">const</span> WEBHOOK_URL = parameters[<span class=\"hljs-string\">&#x27;WEBHOOK_URL&#x27;</span>];\n\n  <span class=\"hljs-comment\">// get results from previous task</span>\n  <span class=\"hljs-comment\">// fetch status task result</span>\n  <span class=\"hljs-keyword\">const</span> status_result = <span class=\"hljs-keyword\">await</span> ex.result(FETCH_STATUS_TASK);\n\n  <span class=\"hljs-comment\">// set the fetch() api parameters [method, headers, body]</span>\n  <span class=\"hljs-comment\">// https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</span>\n  <span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;POST&quot;</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-string\">&#x27;content-type&#x27;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span>,\n    },\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(status_result)\n  };\n\n  <span class=\"hljs-comment\">// execute the fetch() api call</span>\n  <span class=\"hljs-comment\">// set the url parameter equal to the status.io url parameter</span>\n  <span class=\"hljs-keyword\">const</span> url = WEBHOOK_URL;\n  <span class=\"hljs-comment\">// make the fetch call, passing the url and options, capture the response</span>\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetch(url,options);\n  <span class=\"hljs-comment\">// capture the response code</span>\n  <span class=\"hljs-keyword\">const</span> response_status = response.status\n\n  <span class=\"hljs-keyword\">return</span> response_status;\n}\n</code></pre>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_fetch_status_io</code> is <code>success</code></p>\n<p>Additionally, we only want this task to run if the <code>result</code> attribute is defined in the previous task.  We can access the result using a Jinja expression:</p>\n<p>Set the <code>And custom condition was met</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;js_fetch_status_io&quot;</span>)[&#x27;result&#x27;] is defined }}</span><span class=\"xml\">\n</span></code></pre>\n<p><img src=\"assets/02-fetch-webhook-site-input.png\" alt=\"assets/02-fetch-webhook-site-input.png\" /></p>\n<p>Run the workflow and validate the results</p>\n<p><img src=\"assets/02-fetch-webhook-site-results.png\" alt=\"assets/02-fetch-webhook-site-results.png\" /></p>","activityList":[]},{"id":"2.3","name":"Looping Tasks","content":"<h2 id=\"loopingtasks\">Looping Tasks</h2>\n<h4 id=\"dql_query_bizevents\"><code>dql_query_bizevents</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">dql_query_bizevents\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Query bizevents\n</code></pre>\n<p>This will be the task/action that queries bizevents that are being generated from the data generator workflow.  This will demonstrate how to query data from Dynatrace (Grail) and use the data/results in subsequent tasks.</p>\n<p>Locate the <code>js_fetch_status_io</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Execute DQL Query</code> action type.</p>\n<p>Set the task name and description respectively.</p>\n<p>Paste the following DQL query into the action <code>Input</code>:</p>\n<pre><code class=\"hljs sql language-sql\">fetch bizevents, from: now()-2h\n| filter event.provider == &quot;workflow.essentials.withdraw-processing&quot;\n| summarize count = count(), by: {step = event.type}\n| sort step asc\n</code></pre>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_fetch_status_io</code> is <code>success</code></p>\n<p><img src=\"assets/02-query-bizevents-input.png\" alt=\"assets/02-query-bizevents-input.png\" /></p>\n<hr />\n<h4 id=\"js_loop_over_results\"><code>js_loop_over_results</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_loop_over_results\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Execute task for each loop item, bizevent record\n</code></pre>\n<p>This will be the task/action that iterates over the results of a DQL query and performs desired activities.  If a result record matches a condition, it will use fetch() api to send data to webhook.site.</p>\n<p>Locate the <code>dql_query_bizevents</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p>Set the task name and description respectively.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> { execution, actionExecution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { getCurrentUserDetails,getEnvironmentId,getEnvironmentUrl } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/app-environment&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> PARAMETERS_TASK = <span class=\"hljs-string\">&#x27;js_set_parameters&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id, action_execution_id }</span>) </span>{\n\n  <span class=\"hljs-comment\">// get parameters from previous tasks</span>\n  <span class=\"hljs-comment\">// execution</span>\n  <span class=\"hljs-keyword\">const</span> ex = <span class=\"hljs-keyword\">await</span> execution(execution_id);\n  <span class=\"hljs-comment\">// parameters</span>\n  <span class=\"hljs-keyword\">const</span> parameters = <span class=\"hljs-keyword\">await</span> ex.result(PARAMETERS_TASK);\n  <span class=\"hljs-comment\">// WEBHOOK_URL</span>\n  <span class=\"hljs-keyword\">const</span> WEBHOOK_URL = parameters[<span class=\"hljs-string\">&#x27;WEBHOOK_URL&#x27;</span>];\n\n  <span class=\"hljs-comment\">// get the loop item for the action execution</span>\n  <span class=\"hljs-keyword\">const</span> actionEx = <span class=\"hljs-keyword\">await</span> actionExecution(action_execution_id);\n  <span class=\"hljs-keyword\">const</span> record = actionEx.loopItem[<span class=\"hljs-string\">&#x27;item&#x27;</span>];\n  <span class=\"hljs-comment\">// log the loop item record</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(record));\n  <span class=\"hljs-comment\">// create variables for the step and count attributes within the record</span>\n  <span class=\"hljs-keyword\">const</span> step = record[<span class=\"hljs-string\">&#x27;step&#x27;</span>];\n  <span class=\"hljs-keyword\">const</span> count = record[<span class=\"hljs-string\">&#x27;count&#x27;</span>];\n\n  <span class=\"hljs-comment\">// check if step is &quot;06.funds.received&quot;, send webhook with details</span>\n  <span class=\"hljs-keyword\">if</span>(step == <span class=\"hljs-string\">&quot;06.funds.received&quot;</span>) {\n\n    <span class=\"hljs-comment\">// get a timestamp to send with the payload</span>\n    <span class=\"hljs-comment\">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date</span>\n    <span class=\"hljs-keyword\">const</span> timestamp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n\n    <span class=\"hljs-comment\">// Environment ID</span>\n    <span class=\"hljs-keyword\">const</span> environment_id = getEnvironmentId();\n\n    <span class=\"hljs-comment\">// Workflow execution user details</span>\n    <span class=\"hljs-keyword\">const</span> user_details = getCurrentUserDetails();\n    <span class=\"hljs-keyword\">const</span> user_name = user_details[<span class=\"hljs-string\">&#x27;name&#x27;</span>]; <span class=\"hljs-comment\">// get the user name</span>\n\n    <span class=\"hljs-comment\">// set the fetch() api parameters [method, headers, body]</span>\n    <span class=\"hljs-comment\">// https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</span>\n    <span class=\"hljs-keyword\">const</span> options = {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;POST&quot;</span>,\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-string\">&#x27;content-type&#x27;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span>,\n      },\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({\n        <span class=\"hljs-attr\">timestamp</span>: timestamp.toISOString(), <span class=\"hljs-comment\">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString</span>\n        <span class=\"hljs-attr\">step</span>: step,\n        <span class=\"hljs-attr\">count</span>: count,\n        <span class=\"hljs-attr\">environment</span>: environment_id,\n        <span class=\"hljs-attr\">user</span>: user_name\n      })\n    };\n\n    <span class=\"hljs-comment\">// execute the fetch() api call</span>\n    <span class=\"hljs-comment\">// set the url parameter equal to the status.io url parameter</span>\n    <span class=\"hljs-keyword\">const</span> url = WEBHOOK_URL;\n    <span class=\"hljs-comment\">// make the fetch call, passing the url and options, capture the response</span>\n    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetch(url,options);\n    <span class=\"hljs-comment\">// capture the response code</span>\n    <span class=\"hljs-keyword\">const</span> response_status = response.status\n\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">step</span>: step, <span class=\"hljs-attr\">count</span>: count, <span class=\"hljs-attr\">response</span>: response_status };\n  }\n\n  <span class=\"hljs-comment\">// return the step and count attributes</span>\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">step</span>: step, <span class=\"hljs-attr\">count</span>: count };\n}\n</code></pre>\n<p><img src=\"assets/02-loop-results-input.png\" alt=\"assets/02-loop-results-input.png\" /></p>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>dql_query_bizevents</code> is <code>success</code></p>\n<p>Additionally, we only want this task to run if the result of the previous task has a <code>records</code> array with a <code>length &gt; 0</code>.</p>\n<p>Set the <code>And custom condition was met</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;dql_query_bizevents&quot;</span>).records | length &gt; <span class=\"hljs-number\">0</span> }}</span><span class=\"xml\">\n</span></code></pre>\n<p><em>note</em> <code>result(\"dql_query_bizevents\").records</code> is the same as <code>result(\"dql_query_bizevents\")['records']</code></p>\n<p>Finally, we want this task to execute as a loop.  This works by providing a <code>List</code> which is an array/list of data you want to iterate over and perform the task for each element/index.  You can provide data from a previous task using a Jinja expression.  You can access element/index through the provided <code>Item variable name</code>, either from JS code or Jinja expression.  Additionally, you can specify loop concurrency to increase parallel operations.</p>\n<p>Click on the task's <code>Options</code> tab.  Toggle on <code>Loop task</code> setting.</p>\n<p>Set the <code>Item variable name</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-built_in\">item</span>\n</code></pre>\n<p>Set the <code>List</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;dql_query_bizevents&quot;</span>).records }}</span><span class=\"xml\">\n</span></code></pre>\n<p><img src=\"assets/02-loop-results-conditions-options.png\" alt=\"assets/02-loop-results-conditions-options.png\" /></p>\n<p>The loop item is access in our JS code with the following snippet:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// import the required package</span>\n<span class=\"hljs-keyword\">import</span> { actionExecution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>;\n<span class=\"hljs-comment\">// declare function</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id, action_execution_id }</span>) </span>{\n<span class=\"hljs-comment\">// get the loop item for the action execution</span>\n<span class=\"hljs-keyword\">const</span> actionEx = <span class=\"hljs-keyword\">await</span> actionExecution(action_execution_id);\n<span class=\"hljs-keyword\">const</span> record = actionEx.loopItem[<span class=\"hljs-string\">&#x27;item&#x27;</span>];\n<span class=\"hljs-comment\">// we can now use the contents of record</span>\n<span class=\"hljs-built_in\">console</span>.log(record); <span class=\"hljs-comment\">// for example</span>\n<span class=\"hljs-comment\">// end function</span>\n}\n</code></pre>\n<p>Run the workflow and validate the results</p>\n<p><img src=\"assets/02-loop-results-output-results.png\" alt=\"assets/02-loop-results-output-results.png\" /></p>","activityList":[]}]},{"id":"3","name":"Ingest and Alert","content":"<h2 id=\"ingestandalert\">Ingest and Alert</h2>\n<p>Goal: Retrieve data from an external system and ingest it as a metric.  If the value crosses a configured threshold, then generate an event/alert.</p>\n<ul>\n<li>Credential Vault<ul>\n<li>Access an API token from the Credential Vault using the Dynatrace SDK</li></ul></li>\n<li>Metric Ingest<ul>\n<li>Retrieve data from an external system using HTTP GET</li>\n<li>Ingest retrieved data point using the Dynatrace API with API token (not optimal)</li>\n<li>Ingest retrieved data point using the Dynatrace SDK (optimal)</li></ul></li>\n<li>Event Ingest<ul>\n<li>Query ingested metric data point using DQL</li>\n<li>Evaluate metric value against a threshold</li>\n<li>If the threshold is breached, generate an event using the Dynatrace SDK</li></ul></li>\n</ul>","activityList":[{"id":"3.1","name":"Set Workflow Parameters","content":"<h2 id=\"setworkflowparameters\">Set Workflow Parameters</h2>\n<p>Begin by creating a new Workflow in the Workflows App within your Dynatrace environment.</p>\n<p><em>Remember to save progress often!</em></p>\n<p>Select a trigger: choose <code>On demand trigger</code></p>\n<p><img src=\"assets/03-workflow-trigger-type.png\" alt=\"assets/03-workflow-trigger-type.png\" /></p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p><img src=\"assets/03-add-first-action.png\" alt=\"assets/03-add-first-action.png\" /></p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p><img src=\"assets/03-set-parameters-choose-action.png\" alt=\"assets/03-set-parameters-choose-action.png\" /></p>\n<hr />\n<h4 id=\"js_set_parameters\"><code>js_set_parameters</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_set_parameters\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Set the parameters for this workflow\n</code></pre>\n<p>This will be the task/action that defines the parameters/variables that will be used by subsequent tasks and returns them in the result.  By setting the parameters as nested attribute key:value pairs within a single variable, as additional parameters are needed they can easily be added without modifying any other code.</p>\n<p>Set the task name and description respectively.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-keyword\">let</span> PARAMETERS = {\n\n    <span class=\"hljs-comment\">// EASYTRAVEL_URL - the URL to the easytravel rest API to search for journeys and receive JSON payload</span>\n    <span class=\"hljs-attr\">EASYTRAVEL_URL</span>: <span class=\"hljs-string\">&quot;http://aeb26f2507d934338baf67206067edef-612923892.us-east-1.elb.amazonaws.com/easytravel/rest/journeys/?match=Dallas&amp;from=&amp;to=&quot;</span>, <span class=\"hljs-comment\">// i.e. EASYTRAVEL_URL: &quot;http://aeb26f2507d934338baf67206067edef-612923892.us-east-1.elb.amazonaws.com/easytravel/rest/journeys/?match=Dallas&amp;from=&amp;to=&quot;</span>\n\n    <span class=\"hljs-comment\">// METRIC - the unique metric id to ingest a data point for the easytravel journey amount</span>\n    <span class=\"hljs-attr\">METRIC</span>: <span class=\"hljs-string\">&quot;custom.workflow_essentials.easytravel.journey_amount&quot;</span>, <span class=\"hljs-comment\">// i.e. METRIC: &quot;custom.workflow_essentials.easytravel.journey_amount&quot;</span>\n\n    <span class=\"hljs-comment\">// CREDENTIAL - the credential vault entity ID that holds the Dynatrace API token value with metrics.ingest scope</span>\n    <span class=\"hljs-attr\">CREDENTIAL</span>: <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-comment\">// i.e. CREDENTIAL: &quot;CREDENTIALS_VAULT-123ABCF8F36FD&quot;</span>\n\n    <span class=\"hljs-comment\">// INGEST_URL - the URL of the dynatrace metric ingest API endpoint</span>\n    <span class=\"hljs-attr\">INGEST_URL</span>: <span class=\"hljs-string\">&quot;https://&lt;tenant-id&gt;.live.dynatrace.com/api/v2/metrics/ingest&quot;</span>, <span class=\"hljs-comment\">// i.e. INGEST_URL: &quot;https://abc123.live.dynatrace.com/api/v2/metrics/ingest&quot;</span>\n\n    <span class=\"hljs-comment\">// THRESHOLD - the threshold amount to trigger an alert event</span>\n    <span class=\"hljs-attr\">THRESHOLD</span>: <span class=\"hljs-number\">500</span>, <span class=\"hljs-comment\">// i.e. THRESHOLD: 500; trigger an alert event if the average journey amount is above 500.00</span>\n\n  }\n\n  <span class=\"hljs-keyword\">return</span> PARAMETERS;\n}\n</code></pre>\n<p>Set the value of the missing variables:</p>\n<ul>\n<li>CREDENTIAL:<ul>\n<li>Use the credential vault entry ID from the Workflow Essentials - Config Generator workflow execution</li></ul></li>\n<li>INGEST_URL:<ul>\n<li>Replace <code>&lt;tenant-id&gt;</code> with your Dynatrace environment ID, i.e. <code>abc123</code></li></ul></li>\n</ul>\n<p><img src=\"assets/03-set-parameters-input.png\" alt=\"assets/03-set-parameters-input.png\" /></p>","activityList":[]},{"id":"3.2","name":"Query External Data","content":"<h2 id=\"queryexternaldata\">Query External Data</h2>\n<h4 id=\"http_easytravel_search\"><code>http_easytravel_search</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">http_easytravel_search\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Query external easytravel API for journey data\n</code></pre>\n<p>This will be the task/action that queries external data from an api endpoint that contains our metric data point.</p>\n<p>Locate the <code>js_set_parameters</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>HTTP Request</code> action type.</p>\n<p>Set the task name and description respectively.</p>\n<p>Configure the HTTP Request action <code>Input</code>:</p>\n<p>Method:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-builtin-name\">GET</span>\n</code></pre>\n<p>URL:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;js_set_parameters&quot;</span>)[&#x27;EASYTRAVEL_URL&#x27;] }}</span><span class=\"xml\">\n</span></code></pre>\n<p>Headers:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">accept</span>  application/json\n</code></pre>\n<p>Error Handling:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">Fail</span> <span class=\"hljs-literal\">on</span> certain HTTP response codes<span class=\"hljs-meta\"> [Enabled]</span>\n</code></pre>\n<p>HTTP error codes:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">400</span>-<span class=\"hljs-number\">599</span>\n</code></pre>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_set_parameters</code> is <code>success</code></p>\n<p>Additionally, we only want this task to run if the <code>EASYTRAVEL_URL</code> parameter is defined in the previous task.  We can access the result using a Jinja expression:</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-number\">1.</span> {{ result(<span class=\"hljs-string\">&quot;task_name&quot;</span>) }}\n<span class=\"hljs-number\">2.</span> {{ result(<span class=\"hljs-string\">&quot;task_name&quot;</span>)[<span class=\"hljs-string\">&#x27;result_attribute_name&#x27;</span>] }}\n<span class=\"hljs-number\">3.</span> {{ result(<span class=\"hljs-string\">&quot;task_name&quot;</span>)[<span class=\"hljs-string\">&#x27;result_attribute_name&#x27;</span>] condition expression }}\n</code></pre>\n<p><a href=\"https://docs.dynatrace.com/docs/platform-modules/automations/workflows/reference\">Expression Reference Documentation</a></p>\n<p>Set the <code>And custom condition was met</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;js_set_parameters&quot;</span>)[&#x27;EASYTRAVEL_URL&#x27;] is defined }}</span><span class=\"xml\">\n</span></code></pre>\n<p><img src=\"assets/03-http-easytravel-search-input.png\" alt=\"assets/03-http-easytravel-search-input.png\" /></p>\n<p>Run the workflow and validate the results</p>\n<p><img src=\"assets/03-http-easytravel-search-results.png\" alt=\"assets/03-http-easytravel-search-results.png\" /></p>","activityList":[]},{"id":"3.3","name":"Credential Vault with Dynatrace SDK","content":"<h2 id=\"credentialvaultwithdynatracesdk\">Credential Vault with Dynatrace SDK</h2>\n<h4 id=\"js_get_credential\"><code>js_get_credential</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_get_credential\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Access API token from the credential vault\n</code></pre>\n<p>This will be the task/action that uses the Dynatrace SDK to retrieve a credential from the vault.  Confidential data and parameters should be stored in the credential vault and not statically defined in the code.</p>\n<p>Locate the <code>http_easytravel_search</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p>Set the task name and description respectively.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> { execution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { credentialVaultClient } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/client-classic-environment-v2&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> PARAMETERS_TASK = <span class=\"hljs-string\">&#x27;js_set_parameters&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id }</span>) </span>{\n\n  <span class=\"hljs-comment\">// get parameters from previous tasks</span>\n  <span class=\"hljs-comment\">// execution</span>\n  <span class=\"hljs-keyword\">const</span> ex = <span class=\"hljs-keyword\">await</span> execution(execution_id);\n  <span class=\"hljs-comment\">// parameters</span>\n  <span class=\"hljs-keyword\">const</span> parameters = <span class=\"hljs-keyword\">await</span> ex.result(PARAMETERS_TASK);\n  <span class=\"hljs-comment\">// CREDENTIAL</span>\n  <span class=\"hljs-keyword\">const</span> CREDENTIAL = parameters[<span class=\"hljs-string\">&#x27;CREDENTIAL&#x27;</span>];\n\n  <span class=\"hljs-comment\">// get the credentials from the credential vault using the SDK</span>\n  <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#getcredentialsdetails</span>\n  <span class=\"hljs-keyword\">const</span> data = (<span class=\"hljs-keyword\">await</span> credentialVaultClient.getCredentialsDetails({<span class=\"hljs-attr\">id</span>: CREDENTIAL}));\n  <span class=\"hljs-keyword\">const</span> token = data[<span class=\"hljs-string\">&#x27;token&#x27;</span>];\n\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">token</span>: token };\n}\n</code></pre>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>http_easytravel_search</code> is <code>success</code></p>\n<p>Additionally, we only want this task to run if the <code>status_code</code> is <code>200</code> and the response is not empty in the previous task.</p>\n<p>Set the <code>And custom condition was met</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;http_easytravel_search&quot;</span>)[&quot;status_code&quot;] == <span class=\"hljs-number\">200</span> and result(<span class=\"hljs-name\">&quot;http_easytravel_search&quot;</span>)[&quot;json&quot;] | length &gt; <span class=\"hljs-number\">0</span> }}</span><span class=\"xml\">\n</span></code></pre>\n<p><img src=\"assets/03-get-credential-input.png\" alt=\"assets/03-get-credential-input.png\" /></p>","activityList":[]},{"id":"3.4","name":"Metric Ingest - Dynatrace API with Token","content":"<h2 id=\"metricingestdynatraceapiwithtoken\">Metric Ingest - Dynatrace API with Token</h2>\n<h4 id=\"http_ingest_metric\"><code>http_ingest_metric</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">http_ingest_metric\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Ingest a metric data point using the metric API\n</code></pre>\n<p>This will be the task/action that ingests a metric data point from the previous task using an HTTP call to the metric ingest API with a token from the credential vault.</p>\n<p>Locate the <code>js_get_credential</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>HTTP Request</code> action type.</p>\n<p>Set the task name and description respectively.</p>\n<p>Configure the HTTP Request action <code>Input</code>:</p>\n<p>Method:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">POST</span>\n</code></pre>\n<p>URL:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;js_set_parameters&quot;</span>)[&#x27;INGEST_URL&#x27;] }}</span><span class=\"xml\">\n</span></code></pre>\n<p>Payload:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;js_set_parameters&quot;</span>)[&quot;METRIC&quot;] }}</span><span class=\"xml\">,id=</span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;http_easytravel_search&quot;</span>)[&quot;json&quot;][0][&quot;id&quot;] }}</span><span class=\"xml\">,destination=</span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;http_easytravel_search&quot;</span>)[&quot;json&quot;][0][&quot;destination&quot;] }}</span><span class=\"xml\"> </span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;http_easytravel_search&quot;</span>)[&quot;json&quot;][0][&quot;amount&quot;] }}</span><span class=\"xml\">\n</span></code></pre>\n<p>Headers:</p>\n<pre><code class=\"hljs\"><span class=\"xml\">Content-Type  text/plain\nAuthorization   Api-Token </span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;js_get_credential&quot;</span>)[&quot;token&quot;] }}</span><span class=\"xml\">\n</span></code></pre>\n<p>Error Handling:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">Fail</span> <span class=\"hljs-literal\">on</span> certain HTTP response codes<span class=\"hljs-meta\"> [Enabled]</span>\n</code></pre>\n<p>HTTP error codes:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">400</span>-<span class=\"hljs-number\">599</span>\n</code></pre>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_get_credential</code> is <code>success</code></p>\n<p>Additionally, we only want this task to run if the <code>token</code> parameter is defined in the previous task.</p>\n<p>Set the <code>And custom condition was met</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;js_get_credential&quot;</span>)[&#x27;token&#x27;] is defined }}</span><span class=\"xml\">\n</span></code></pre>\n<p><img src=\"assets/03-http-ingest-metric-input.png\" alt=\"assets/03-http-ingest-metric-input.png\" /></p>\n<p>Run the workflow and validate the results</p>\n<p><img src=\"assets/03-http-ingest-metric-results.png\" alt=\"assets/03-http-ingest-metric-results.png\" /></p>","activityList":[]},{"id":"3.5","name":"Metric Ingest - Dynatrace SDK","content":"<h2 id=\"metricingestdynatracesdk\">Metric Ingest - Dynatrace SDK</h2>\n<h4 id=\"js_ingest_metric_sdk\"><code>js_ingest_metric_sdk</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_ingest_metric_sdk\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Ingest a metric data point using the SDK\n</code></pre>\n<p>This will be the task/action that uses the Dynatrace SDK to ingest a metric data point.  The SDK makes it significantly easier to perform this function than using the API and authorization token.</p>\n<p>Locate the <code>http_easytravel_search</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p>Set the task name and description respectively.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> { execution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { metricsClient } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@dynatrace-sdk/client-classic-environment-v2&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> PARAMETERS_TASK = <span class=\"hljs-string\">&#x27;js_set_parameters&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> SEARCH_TASK = <span class=\"hljs-string\">&#x27;http_easytravel_search&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id }</span>) </span>{\n\n  <span class=\"hljs-comment\">// get parameters from previous tasks</span>\n  <span class=\"hljs-comment\">// execution</span>\n  <span class=\"hljs-keyword\">const</span> ex = <span class=\"hljs-keyword\">await</span> execution(execution_id);\n  <span class=\"hljs-comment\">// parameters</span>\n  <span class=\"hljs-keyword\">const</span> parameters = <span class=\"hljs-keyword\">await</span> ex.result(PARAMETERS_TASK);\n  <span class=\"hljs-keyword\">const</span> METRIC = parameters[<span class=\"hljs-string\">&#x27;METRIC&#x27;</span>];\n  <span class=\"hljs-comment\">// previous results</span>\n  <span class=\"hljs-keyword\">const</span> search_results = <span class=\"hljs-keyword\">await</span> ex.result(SEARCH_TASK);\n  <span class=\"hljs-keyword\">const</span> id = search_results[<span class=\"hljs-string\">&#x27;json&#x27;</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&#x27;id&#x27;</span>];\n  <span class=\"hljs-keyword\">const</span> amount = search_results[<span class=\"hljs-string\">&#x27;json&#x27;</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&#x27;amount&#x27;</span>];\n  <span class=\"hljs-keyword\">const</span> destination = search_results[<span class=\"hljs-string\">&#x27;json&#x27;</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&#x27;destination&#x27;</span>];\n\n  <span class=\"hljs-comment\">// build the line_protocol string to ingest the metric data point</span>\n  <span class=\"hljs-keyword\">const</span> line_protocol = METRIC + <span class=\"hljs-string\">&#x27;,id=&#x27;</span> + id + <span class=\"hljs-string\">&#x27;,destination=&#x27;</span> + destination + <span class=\"hljs-string\">&#x27; &#x27;</span> + amount;\n  <span class=\"hljs-comment\">// (optional) log the line_protocol value</span>\n  <span class=\"hljs-built_in\">console</span>.log(line_protocol);\n  <span class=\"hljs-comment\">// ingest the metric data point using the SDK</span>\n  <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#ingest-1</span>\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> metricsClient.ingest({\n    <span class=\"hljs-attr\">body</span>: line_protocol,\n  });\n\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">data</span>: data };\n}\n</code></pre>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>http_easytravel_search</code> is <code>success</code></p>\n<p>Additionally, we only want this task to run if the <code>status_code</code> is <code>200</code> and the response is not empty in the previous task.</p>\n<p>Set the <code>And custom condition was met</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;http_easytravel_search&quot;</span>)[&quot;status_code&quot;] == <span class=\"hljs-number\">200</span> and result(<span class=\"hljs-name\">&quot;http_easytravel_search&quot;</span>)[&quot;json&quot;] | length &gt; <span class=\"hljs-number\">0</span> }}</span><span class=\"xml\">\n</span></code></pre>\n<p><img src=\"assets/03-ingest-metric-sdk-input.png\" alt=\"assets/03-ingest-metric-sdk-input.png\" /></p>\n<p>Run the workflow and validate the results</p>\n<p><img src=\"assets/03-ingest-metric-sdk-results.png\" alt=\"assets/03-ingest-metric-sdk-results.png\" /></p>","activityList":[]},{"id":"3.6","name":"Event Ingest - Dynatrace SDK","content":"<h2 id=\"eventingestdynatracesdk\">Event Ingest - Dynatrace SDK</h2>\n<h4 id=\"js_wait_30_seconds\"><code>js_wait_30_seconds</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_wait_30_seconds\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Wait 30 seconds for data to be processed\n</code></pre>\n<p>This will be the task/action that pauses workflow execution for 30 seconds with a timed wait using JS code.  This method can be useful when you need to pause task execution within your JS code task.  Additionally, you can configure any task to wait up to 60 seconds in the <code>Options</code> tab.</p>\n<p>When data is ingested into the Dynatrace platform, it may not be available immediately.  To avoid a query from returning an empty result set, we'll wait 30 seconds for the data to be processed before continuing.</p>\n<p>Locate the <code>http_ingest_metric</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p>Set the task name and description respectively.</p>\n<p>Locate the <code>js_ingest_metric_sdk</code> task.</p>\n<p>Click <em>and hold</em> the <code>+</code> button, then <em>drag</em> to connect this task to the <code>js_wait_30_seconds</code> task.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-keyword\">const</span> sleep = <span class=\"hljs-keyword\">async</span> (waitTime: <span class=\"hljs-built_in\">number</span>) =&gt;\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(resolve, waitTime));\n\n  <span class=\"hljs-keyword\">const</span> waitTime = <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-comment\">// 30,000ms = 30 seconds to sleep</span>\n  <span class=\"hljs-keyword\">await</span> sleep(<span class=\"hljs-number\">30000</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Finished Waiting&quot;</span>);\n  }\n\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Waiting 30 Seconds&quot;</span>);\n  waitTime();\n\n}\n</code></pre>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_ingest_metric_sdk</code> is <code>success</code> and <code>http_ingest_metric</code> is <code>success</code></p>\n<p><img src=\"assets/03-wait-30-seconds-input.png\" alt=\"assets/03-wait-30-seconds-input.png\" /></p>\n<hr />\n<h4 id=\"js_dql_query_alert\"><code>js_dql_query_alert</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_dql_query_alert\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Query metric data point and generate an alert via SDK\n</code></pre>\n<p>This will be the task/action that uses the Dynatrace SDK to execute a DQL query to retrieve a metric data point and trigger an alert event if the value crosses a threshold.  Using the Dynatrace SDK is an alternative method for running a DQL query within workflows.  When a Davis problem event is triggered using the Dynatrace SDK within workflows, the event is stored in Grail and the problem is available in the Problems app.</p>\n<p>Locate the <code>js_wait_30_seconds</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> { execution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { queryExecutionClient } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@dynatrace-sdk/client-query&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { eventsClient, EventIngestEventType } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@dynatrace-sdk/client-classic-environment-v2&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> PARAMETERS_TASK = <span class=\"hljs-string\">&#x27;js_set_parameters&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> SEARCH_TASK = <span class=\"hljs-string\">&#x27;http_easytravel_search&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id }</span>) </span>{\n\n  <span class=\"hljs-comment\">// get parameters from previous tasks</span>\n  <span class=\"hljs-comment\">// execution</span>\n  <span class=\"hljs-keyword\">const</span> ex = <span class=\"hljs-keyword\">await</span> execution(execution_id);\n  <span class=\"hljs-comment\">// parameters</span>\n  <span class=\"hljs-keyword\">const</span> parameters = <span class=\"hljs-keyword\">await</span> ex.result(PARAMETERS_TASK);\n  <span class=\"hljs-keyword\">const</span> METRIC = parameters[<span class=\"hljs-string\">&#x27;METRIC&#x27;</span>];\n  <span class=\"hljs-keyword\">const</span> THRESHOLD = parameters[<span class=\"hljs-string\">&#x27;THRESHOLD&#x27;</span>];\n  <span class=\"hljs-comment\">// previous results</span>\n  <span class=\"hljs-keyword\">const</span> search_results = <span class=\"hljs-keyword\">await</span> ex.result(SEARCH_TASK);\n  <span class=\"hljs-keyword\">const</span> destination = search_results[<span class=\"hljs-string\">&#x27;json&#x27;</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&#x27;destination&#x27;</span>];\n\n  <span class=\"hljs-comment\">// build the DQL query for the metric</span>\n  <span class=\"hljs-comment\">// query the metric value for the last 5 minutes</span>\n  <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-query/#queryexecute</span>\n  <span class=\"hljs-keyword\">const</span> timeout = <span class=\"hljs-number\">60</span>;\n  <span class=\"hljs-keyword\">const</span> query = <span class=\"hljs-string\">&#x27;timeseries journey_amount = avg(&#x27;</span> + METRIC + <span class=\"hljs-string\">&#x27;), by: {destination}, from: now()-5m\\\n                  | filter destination == &quot;&#x27;</span> + destination + <span class=\"hljs-string\">&#x27;&quot;\\\n                  | summarize avg_amount = avg(arrayAvg(journey_amount))&#x27;</span>;\n\n  <span class=\"hljs-keyword\">const</span> query_response = <span class=\"hljs-keyword\">await</span> queryExecutionClient.queryExecute({ <span class=\"hljs-attr\">body</span>: { query, <span class=\"hljs-attr\">requestTimeoutMilliseconds</span>: timeout * <span class=\"hljs-number\">1000</span>, <span class=\"hljs-attr\">fetchTimeoutSeconds</span>: timeout  } });\n\n  <span class=\"hljs-comment\">// check if the query result is empty (unexpectedly)</span>\n  <span class=\"hljs-keyword\">if</span>(query_response.result.records.length == <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Query returned an empty result unexpectedly!&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> query_response.result;\n  }\n\n  <span class=\"hljs-comment\">// capture the average journey amount from query response</span>\n  <span class=\"hljs-keyword\">const</span> avg_amount = <span class=\"hljs-built_in\">parseFloat</span>(query_response.result.records[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&#x27;avg_amount&#x27;</span>]);\n\n  <span class=\"hljs-comment\">// check if the avg amount value is above the threshold parameter, if true then raise alert event</span>\n  <span class=\"hljs-keyword\">if</span>(avg_amount &gt; THRESHOLD) {\n\n    <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#createevent</span>\n    <span class=\"hljs-keyword\">const</span> event_response = <span class=\"hljs-keyword\">await</span> eventsClient.createEvent({\n      <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#eventingest</span>\n      <span class=\"hljs-attr\">body</span> : {\n        <span class=\"hljs-attr\">eventType</span>: EventIngestEventType.CustomAlert, <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#eventingesteventtype</span>\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;EasyTravel Journey Amount [ &#x27;</span> + avg_amount + <span class=\"hljs-string\">&#x27; ]&#x27;</span>,\n        <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-attr\">properties</span>: {\n          <span class=\"hljs-string\">&#x27;amount&#x27;</span>: avg_amount,\n          <span class=\"hljs-string\">&#x27;threshold&#x27;</span> : THRESHOLD,\n        }\n      }\n    });\n\n    <span class=\"hljs-comment\">// validate that the alert event was created, return the correlationId and details</span>\n    <span class=\"hljs-keyword\">if</span>(event_response.eventIngestResults[<span class=\"hljs-number\">0</span>].status == <span class=\"hljs-string\">&quot;OK&quot;</span>) {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">amount</span>: avg_amount,\n        <span class=\"hljs-attr\">threshold</span>: THRESHOLD,\n        <span class=\"hljs-attr\">correlationId</span>: event_response.eventIngestResults[<span class=\"hljs-number\">0</span>].correlationId\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">amount</span>: avg_amount,\n        <span class=\"hljs-attr\">threshold</span>: THRESHOLD,\n        <span class=\"hljs-attr\">correlationId</span>: <span class=\"hljs-string\">&quot;ERROR&quot;</span>\n      }\n    }\n  }\n}\n</code></pre>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_wait_30_seconds</code> is <code>success</code></p>\n<p><img src=\"assets/03-dql-query-alert-input.png\" alt=\"assets/03-dql-query-alert-input.png\" /></p>\n<p>Run the workflow and validate the results</p>\n<p><img src=\"assets/03-dql-query-alert-results.png\" alt=\"assets/03-dql-query-alert-results.png\" /></p>\n<p>After validating that the workflow execution was successful and the <code>js_dql_query_alert</code> result has a populated <code>correlationId</code> value, open the Problems (or Problems (Classic)) app and view the open problem alert.</p>\n<p><img src=\"assets/03-problem-card.png\" alt=\"assets/03-problem-card.png\" /></p>","activityList":[]}]},{"id":"4","name":"Third Party Integration","content":"<h2 id=\"thirdpartyintegration\">Third Party Integration</h2>\n<p>Goal: When a Davis problem event is triggered, send a problem summary as a Slack message to a chosen Slack channel.</p>\n<ul>\n<li>Event Trigger<ul>\n<li>Trigger Workflow when a Davis problem event is detected</li>\n<li>Events are filtered on the type of event, based on the previous exercise</li></ul></li>\n<li>Slack for Workflows<ul>\n<li>Third party integration is typically accomplished with Workflow Apps</li>\n<li>The Slack for Workflows App provides an easy-to-use mechanism for sending messages to a Slack environment containing the data and context from Dynatrace</li>\n<li>Leverage Jinja expressions to access Workflow action results and implement logic</li></ul></li>\n</ul>\n<h3 id=\"slackforworkflows\">Slack for Workflows</h3>\n<p>Your Dynatrace environment can integrate with a Slack workspace using Slack for Workflows. You can automate sending messages to Slack based on the events and schedules defined for your workflow.</p>\n<p><a href=\"https://docs.dynatrace.com/docs/platform-modules/automations/workflows/actions/slack\">Slack for Workflows Documentation</a></p>\n<p>Setting up the Slack integration is straight forward and well documented.  In the interest of time and simplicity, the Slack integration has already been configured for this lab.</p>","activityList":[{"id":"4.1","name":"Davis Problem Event Trigger","content":"<h2 id=\"davisproblemeventtrigger\">Davis Problem Event Trigger</h2>\n<p>Begin by creating a new Workflow in the Workflows App within your Dynatrace environment.</p>\n<p><em>Remember to save progress often!</em></p>\n<p>Select a trigger: choose <code>Davis problem trigger</code></p>\n<p>Filter the events that will trigger this workflow.</p>\n<p>Event state:</p>\n<pre><code class=\"hljs\">active <span class=\"hljs-keyword\">or </span><span class=\"hljs-keyword\">closed\n</span></code></pre>\n<p>Event category:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">Custom</span>\n</code></pre>\n<p>Affected entities:</p>\n<pre><code class=\"hljs\">include entities <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">all</span> defined <span class=\"hljs-keyword\">tagged</span> below\n</code></pre>\n<p>Additional custom filter query:</p>\n<pre><code class=\"hljs\">matches<span class=\"hljs-constructor\">Phrase(<span class=\"hljs-params\">event</span>.<span class=\"hljs-params\">name</span>,<span class=\"hljs-string\">&quot;EasyTravel Journey Amount&quot;</span>)</span>\n</code></pre>\n<p><img src=\"assets/04-workflow-trigger-type.png\" alt=\"assets/04-workflow-trigger-type.png\" /></p>","activityList":[]},{"id":"4.2","name":"Set Workflow Parameters","content":"<h2 id=\"setworkflowparameters\">Set Workflow Parameters</h2>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Run JavaScript</code> action type.</p>\n<p><img src=\"assets/04-set-parameters-action-type.png\" alt=\"assets/04-set-parameters-action-type.png\" /></p>\n<hr />\n<h4 id=\"js_set_parameters\"><code>js_set_parameters</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">js_set_parameters\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Set the parameters for this workflow\n</code></pre>\n<p>This will be the task/action that defines the parameters/variables that will be used by subsequent tasks and returns them in the result.  By setting the parameters as nested attribute key:value pairs within a single variable, as additional parameters are needed they can easily be added without modifying any other code.</p>\n<p>Set the task name and description respectively.</p>\n<p>Paste the following code snippet into the action <code>Input</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-keyword\">let</span> PARAMETERS = {\n\n    <span class=\"hljs-comment\">// SLACK_CHANNEL - the Slack channel name (without the #) that the Slack bot has been added to</span>\n    <span class=\"hljs-attr\">SLACK_CHANNEL</span>: <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-comment\">// i.e. SLACK_CHANNEL: &quot;workflow-essentials&quot;,</span>\n\n  }\n\n  <span class=\"hljs-keyword\">return</span> PARAMETERS;\n}\n</code></pre>\n<p>Set the value of the missing variables:</p>\n<ul>\n<li>SLACK_CHANNEL:<ul>\n<li>Use the channel name you have been provided (or have created)</li></ul></li>\n</ul>\n<p><img src=\"assets/04-set-parameters-input.png\" alt=\"assets/04-set-parameters-input.png\" /></p>","activityList":[]},{"id":"4.3","name":"Slack Integration","content":"<h2 id=\"slackintegration\">Slack Integration</h2>\n<h4 id=\"slack_send_message\"><code>slack_send_message</code></h4>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">slack_send_message\n</code></pre>\n<p>Description:</p>\n<pre><code class=\"hljs text language-text\">Send problem summary in Slack\n</code></pre>\n<p>This will be the task/action that uses the Slack connection to send a problem summary message to a Slack channel.</p>\n<p>Locate the <code>js_set_parameters</code> task.</p>\n<p>Click the <code>+</code> button to add a new action to the Workflow.</p>\n<p>Choose action: choose <code>Send message</code> action type from the Slack for Workflows section/app.</p>\n<p><img src=\"assets/04-send-message-action-type.png\" alt=\"assets/04-send-message-action-type.png\" /></p>\n<p>Set the task name and description respectively.</p>\n<p>Configure the Send message action <code>Input</code>:</p>\n<p>Connection:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">workflow_essentials_demo</span>\n</code></pre>\n<p><em>This connection was created by the Workflow Essentials - Config Generator workflow</em></p>\n<p>Channel:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;js_set_parameters&quot;</span>)[&#x27;SLACK_CHANNEL&#x27;] }}</span><span class=\"xml\">\n</span></code></pre>\n<p>Message:</p>\n<pre><code class=\"hljs\">{\n    <span class=\"hljs-attr\">&quot;blocks&quot;</span>: [\n        {\n            <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;section&quot;</span>,\n            <span class=\"hljs-attr\">&quot;block_id&quot;</span>: <span class=\"hljs-string\">&quot;sectionHeader&quot;</span>,\n            <span class=\"hljs-attr\">&quot;text&quot;</span>: {\n                <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;mrkdwn&quot;</span>,\n                <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;Dynatrace :dt: Problem Detection \\n Workflow Execution: [{{ execution().id }}]&quot;</span>\n            }\n        },\n        {\n            <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;divider&quot;</span>\n        },\n        {\n            <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;section&quot;</span>,\n            <span class=\"hljs-attr\">&quot;block_id&quot;</span>: <span class=\"hljs-string\">&quot;problemState&quot;</span>,\n            <span class=\"hljs-attr\">&quot;text&quot;</span>: {\n                <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;mrkdwn&quot;</span>,\n                <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;Problem State: {% if event()[&#x27;event.status&#x27;] == &#x27;ACTIVE&#x27; %} :warning: OPEN :warning: {% endif %} {% if event()[&#x27;event.status&#x27;] == &#x27;CLOSED&#x27; %} :white_check_mark: RESOLVED :white_check_mark: {% endif %}&quot;</span>\n            }\n        },\n        {\n            <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;divider&quot;</span>\n        },\n        {\n            <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;section&quot;</span>,\n            <span class=\"hljs-attr\">&quot;block_id&quot;</span>: <span class=\"hljs-string\">&quot;problemSummary&quot;</span>,\n            <span class=\"hljs-attr\">&quot;text&quot;</span>: {\n                <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;mrkdwn&quot;</span>,\n                <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;Problem Number: [*{{ event()[&#x27;display_id&#x27;] }}*] \\n Problem ID: [ {{ event()[&#x27;event.id&#x27;] }} ] \\n [ {{ event()[&#x27;event.name&#x27;] }} ]&quot;</span>\n            }\n        },\n        {\n            <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;divider&quot;</span>\n        },\n        {\n            <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;actions&quot;</span>,\n            <span class=\"hljs-attr\">&quot;elements&quot;</span>: [\n                {\n                    <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;button&quot;</span>,\n                    <span class=\"hljs-attr\">&quot;text&quot;</span>: {\n                        <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;plain_text&quot;</span>,\n                        <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;View Problem&quot;</span>,\n                        <span class=\"hljs-attr\">&quot;emoji&quot;</span>: <span class=\"hljs-literal\">true</span>\n                    },\n                    <span class=\"hljs-attr\">&quot;value&quot;</span>: <span class=\"hljs-string\">&quot;problem&quot;</span>,\n                    <span class=\"hljs-attr\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;{{ environment().url }}/ui/apps/dynatrace.classic.problems/#problems/problemdetails;pid={{ event()[&#x27;event.id&#x27;] }}&quot;</span>\n                },\n                {\n                    <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;button&quot;</span>,\n                    <span class=\"hljs-attr\">&quot;text&quot;</span>: {\n                        <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;plain_text&quot;</span>,\n                        <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;View Workflow Execution&quot;</span>,\n                        <span class=\"hljs-attr\">&quot;emoji&quot;</span>: <span class=\"hljs-literal\">true</span>\n                    },\n                    <span class=\"hljs-attr\">&quot;value&quot;</span>: <span class=\"hljs-string\">&quot;workflow&quot;</span>,\n                    <span class=\"hljs-attr\">&quot;url&quot;</span>: <span class=\"hljs-string\">&quot;{{ environment().url }}/ui/apps/dynatrace.automations/executions/{{ execution().id }}&quot;</span>\n                }\n            ]\n        }\n    ]\n}\n</code></pre>\n<p><img src=\"assets/04-send-message-input.png\" alt=\"assets/04-send-message-input.png\" /></p>\n<p>Click on the task's <code>Conditions</code> tab.  Set the <code>Run this task if</code>: <code>js_set_parameters</code> is <code>success</code></p>\n<p>Additionally, we only want this task to run if the <code>EASYTRAVEL_URL</code> parameter is defined in the previous task.  We can access the result using a Jinja expression:</p>\n<pre><code class=\"hljs\"><span class=\"xml\">1. </span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;task_name&quot;</span>) }}</span><span class=\"xml\">\n2. </span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;task_name&quot;</span>)[&#x27;result_attribute_name&#x27;] }}</span><span class=\"xml\">\n3. </span><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;task_name&quot;</span>)[&#x27;result_attribute_name&#x27;] condition expression }}</span><span class=\"xml\">\n</span></code></pre>\n<p><a href=\"https://docs.dynatrace.com/docs/platform-modules/automations/workflows/reference\">Expression Reference Documentation</a></p>\n<p>Set the <code>And custom condition was met</code>:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-template-variable\">{{ <span class=\"hljs-name\">result</span>(<span class=\"hljs-name\">&quot;js_set_parameters&quot;</span>)[&#x27;SLACK_CHANNEL&#x27;] is defined }}</span><span class=\"xml\">\n</span></code></pre>\n<p><img src=\"assets/04-send-message-conditions.png\" alt=\"assets/04-send-message-conditions.png\" /></p>","activityList":[]},{"id":"4.4","name":"Trigger Workflow Execution","content":"<h2 id=\"triggerworkflowexecution\">Trigger Workflow Execution</h2>\n<p>Open the Workflow Essentials - Ingest and Alert workflow from the previous exercise.  Run the workflow and validate the results.  A new problem event should have been created.</p>\n<p><img src=\"assets/04-ingest-and-alert-execution-results.png\" alt=\"assets/04-ingest-and-alert-execution-results.png\" /></p>\n<p>Shortly after running the other workflow, the Workflow Essentials - Slack Integration workflow should have triggered as a result of the problem event.  Check the execution and validate the results.  Open the Slack channel and validate that the message contains the problem summary.</p>\n<p><img src=\"assets/04-slack-integration-execution-results.png\" alt=\"assets/04-slack-integration-execution-results.png\" /></p>\n<p>Third party integrations are available as Workflow Action Apps, which are available in the Hub.</p>\n<p><img src=\"assets/04-workflow-action-apps-in-hub.png\" alt=\"assets/04-workflow-action-apps-in-hub.png\" /></p>","activityList":[]}]},{"id":"5","name":"Code Snippets","content":"<h2 id=\"codesnippets\">Code Snippets</h2>\n<p>Code Snippets Notebook</p>\n<p><a href=\"https://github.com/popecruzdt/dt-workflow-essentials/blob/main/assets/Workflow_Essentials_-_Code_Snippets.json\">Workflow Essentials Code Snippets</a></p>\n<p><img src=\"assets/05-workflow-essentials-code-snippets.png\" alt=\"assets/05-workflow-essentials-code-snippets.png\" /></p>\n<h3 id=\"workflowparameterssetparametertask\">Workflow Parameters: Set Parameter Task</h3>\n<p>The first task of a workflow should be a parameter task that defines the parameters/variables used by the remainder of tasks in the workflow.  Environment and deployment unique settings, like URLs, entities, etc. should be set as parameters in this task so that no other changes need to be made within the workflow when it is copied/cloned/moved for other uses.</p>\n<p>The parameters are specified in a JSON object variable and then returned during task execution to be used by remaining tasks.  Include a description/purpose for the parameter and provide an example value.</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-keyword\">let</span> PARAMETERS = {\n    <span class=\"hljs-comment\">// PARAMETER - description of the parameter</span>\n    <span class=\"hljs-attr\">PARAMETER</span>: <span class=\"hljs-string\">&quot;VALUE&quot;</span>, <span class=\"hljs-comment\">// i.e. PARAMETER: &quot;VALUE&quot; - example value of the parameter</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> PARAMETERS;\n}\n</code></pre>\n<h3 id=\"workflowparametersusingparametersfromparametertask\">Workflow Parameters: Using Parameters from Parameter Task</h3>\n<p>Tasks executed after the parameter task can access the parameters and values from the task result.</p>\n<p>Within the JS code task, the <code>execution</code> class must be used from the <code>dynatrace-sdk/automation-utils</code> package.  Access the parameter from the task result and assign the value to a new variable.</p>\n<p>Within other task types (non JS code), the parameters can be accessed via Jinja expressions.</p>\n<p><code>{{ result(\"js_set_parameters\")['PARAMETER NAME'] }}</code></p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">import</span> { execution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> PARAMETERS_TASK = <span class=\"hljs-string\">&#x27;js_set_parameters&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id }</span>) </span>{\n\n  <span class=\"hljs-comment\">// get parameters from previous tasks</span>\n  <span class=\"hljs-comment\">// execution</span>\n  <span class=\"hljs-keyword\">const</span> ex = <span class=\"hljs-keyword\">await</span> execution(execution_id);\n  <span class=\"hljs-comment\">// parameters</span>\n  <span class=\"hljs-keyword\">const</span> parameters = <span class=\"hljs-keyword\">await</span> ex.result(PARAMETERS_TASK);\n\n  <span class=\"hljs-comment\">// declare new variables to easily access the parameters within this task</span>\n  <span class=\"hljs-keyword\">const</span> PARAMETER = parameters[<span class=\"hljs-string\">&#x27;PARAMETER&#x27;</span>];\n\n}\n</code></pre>\n<h3 id=\"appenvironmentutilities\">App Environment Utilities</h3>\n<p>There are app environment utilities available so that static coding of these values within the workflow are not necessary.</p>\n<p>https://developer.dynatrace.com/develop/sdks/app-environment/</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">import</span> { getCurrentUserDetails } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/app-environment&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { getEnvironmentId } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/app-environment&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { getEnvironmentUrl } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/app-environment&#x27;</span>;\n\n<span class=\"hljs-comment\">// import all 3</span>\n<span class=\"hljs-keyword\">import</span> { getCurrentUserDetails,getEnvironmentId,getEnvironmentUrl } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/app-environment&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// get current workflow execution user details</span>\n  <span class=\"hljs-keyword\">const</span> user_details = getCurrentUserDetails(); <span class=\"hljs-comment\">// returns id, name, email in JSON format</span>\n  <span class=\"hljs-keyword\">const</span> user_email = user_details[<span class=\"hljs-string\">&#x27;email&#x27;</span>]; <span class=\"hljs-comment\">// get the user email address</span>\n  <span class=\"hljs-keyword\">const</span> user_id = user_details[<span class=\"hljs-string\">&#x27;id&#x27;</span>]; <span class=\"hljs-comment\">// get the user id (UUID)</span>\n  <span class=\"hljs-keyword\">const</span> user_name = user_details[<span class=\"hljs-string\">&#x27;name&#x27;</span>]; <span class=\"hljs-comment\">// get the user name</span>\n\n  <span class=\"hljs-comment\">// get current workflow execution environment id (abc123)</span>\n  <span class=\"hljs-keyword\">const</span> environment_id = getEnvironmentId();\n\n  <span class=\"hljs-comment\">// get current workflow execution environment URL (abc123.apps.dynatrace.com)</span>\n  <span class=\"hljs-keyword\">const</span> environment_url = getEnvironmentUrl();\n\n}\n</code></pre>\n<h3 id=\"workingwithloopactions\">Working with Loop Actions</h3>\n<p>Workflow actions can be configured to run as loops with an array of input data as loop items.</p>\n<p>In the action options, an array (typically a result from a previous task) is provided as input. A loop item variable name is also provided for accessing the array element during each loop execution.</p>\n<p>Within the JS code task, the <code>actionExecution</code> class must be used from the <code>dynatrace-sdk/automation-utils</code> package.</p>\n<p>Access the loop item from <code>actionExecution().loopItem['loop item variable name']</code>.</p>\n<p>Within other task types (non JS code), the parameters can be accessed via Jinja expressions.</p>\n<p><code>{{ _.loop item variable name }}</code></p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">import</span> { execution, actionExecution } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/automation-utils&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">{ execution_id, action_execution_id }</span>) </span>{\n\n  <span class=\"hljs-comment\">// execution</span>\n  <span class=\"hljs-keyword\">const</span> ex = <span class=\"hljs-keyword\">await</span> execution(execution_id);\n\n  <span class=\"hljs-comment\">// get the loop item for the action execution</span>\n  <span class=\"hljs-keyword\">const</span> actionEx = <span class=\"hljs-keyword\">await</span> actionExecution(action_execution_id);\n  <span class=\"hljs-keyword\">const</span> loop_item = actionEx.loopItem[<span class=\"hljs-string\">&#x27;item&#x27;</span>]; <span class=\"hljs-comment\">// Loop item variable name from task options</span>\n\n}\n</code></pre>\n<h3 id=\"timedwaitwithinworkflowandactionexecution\">Timed Wait within Workflow and Action Execution</h3>\n<p>There may be a need to perform a timed wait within the execution of a workflow or within a JS code action.  TypeScript provides the capabilities to perform a sleep for a specified amount of time.  The action and the workflow execution will be paused during this time.</p>\n<p>Additionally, workflow actions can be configured to 'Wait before' for a specified amount of time.  The entire workflow action will wait that amoutn of time before beginning execution.</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-keyword\">const</span> sleep = <span class=\"hljs-keyword\">async</span> (waitTime: number) =&gt;\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span>\n    <span class=\"hljs-built_in\">setTimeout</span>(resolve, waitTime));\n\n  <span class=\"hljs-keyword\">const</span> waitTime = <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-comment\">// 30,000ms = 30 seconds to sleep</span>\n  <span class=\"hljs-keyword\">await</span> sleep(<span class=\"hljs-number\">30000</span>);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Finished Waiting&quot;</span>);\n  }\n\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Waiting 30 Seconds&quot;</span>);\n  waitTime();\n\n}\n</code></pre>\n<h3 id=\"gettingexternaldataviahttpswithfetch\">Getting External Data via HTTP(S) with fetch()</h3>\n<p>Workflows can be used to retrieve external data from systems accessible via HTTP(S) and return JSON payloads.</p>\n<p>The <code>fetch()</code> API can be used to execute HTTP(S) calls and retrieve JSON responses.</p>\n<p>https://developer.mozilla.org/en-US/docs/Web/API/Fetch<em>API/Using</em>Fetch</p>\n<p>In order to access external systems, you must configure the domain in the allow list for outbound connections.</p>\n<p>https://developer.dynatrace.com/develop/app-functions/allow-outbound-connections/</p>\n<p>For HTTPS calls, the URL/domain/host must have a valid signed SSL certificate or the call will fail.  There is no way to bypass the SSL certificate check due to data privacy and security standards.</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// set the fetch() api parameters [method, headers, body]</span>\n  <span class=\"hljs-comment\">// https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</span>\n  <span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;GET&quot;</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-string\">&#x27;accept&#x27;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span>,\n    }\n  };\n\n  <span class=\"hljs-comment\">// set the url for the fetch call</span>\n  <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">&quot;http://hostname:port/uri&quot;</span>\n  <span class=\"hljs-comment\">// make the fetch call, passing the url and options, capture the response</span>\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetch(url,options);\n  <span class=\"hljs-comment\">// parse the json response as a new variable</span>\n  <span class=\"hljs-keyword\">const</span> response_json = <span class=\"hljs-keyword\">await</span> response.json();\n  <span class=\"hljs-comment\">// return the json response</span>\n  <span class=\"hljs-keyword\">return</span> response_json;\n\n}\n</code></pre>\n<h3 id=\"sendingdatatoexternalsystemsviahttpswithfetch\">Sending Data to External Systems via HTTP(S) with fetch()</h3>\n<p>Workflows can be used to send data (preferably JSON payload) to external systems accessible via HTTP(S).</p>\n<p>The <code>fetch()</code> API can be used to execute HTTP(S) calls and send (JSON) payloads.</p>\n<p>https://developer.mozilla.org/en-US/docs/Web/API/Fetch<em>API/Using</em>Fetch</p>\n<p>In order to access external systems, you must configure the domain in the allow list for outbound connections.</p>\n<p>https://developer.dynatrace.com/develop/app-functions/allow-outbound-connections/</p>\n<p>For HTTPS calls, the URL/domain/host must have a valid signed SSL certificate or the call will fail.  There is no way to bypass the SSL certificate check due to data privacy and security standards.</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// set the fetch() api parameters [method, headers, body]</span>\n  <span class=\"hljs-comment\">// https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</span>\n  <span class=\"hljs-keyword\">const</span> json_body = {\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&quot;value&quot;</span>\n  }\n\n  <span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&quot;POST&quot;</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-string\">&#x27;content-type&#x27;</span>: <span class=\"hljs-string\">&quot;application/json&quot;</span>,\n    },\n    <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(json_body) <span class=\"hljs-comment\">// convert json object to json string</span>\n  };\n\n  <span class=\"hljs-comment\">// set the url for the fetch call</span>\n  <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">&quot;http://hostname:port/uri&quot;</span>\n  <span class=\"hljs-comment\">// make the fetch call, passing the url and options, capture the response</span>\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> fetch(url,options);\n  <span class=\"hljs-comment\">// capture the response code</span>\n  <span class=\"hljs-keyword\">const</span> response_status = response.status\n\n  <span class=\"hljs-keyword\">return</span> response_status;\n\n}\n</code></pre>\n<h3 id=\"javascriptruntimedynatracesdkfortypescript\">JavaScript Runtime: Dynatrace SDK for TypeScript</h3>\n<p>The SDK for TypeScript provides a TypeScript API for Dynatrace platform services and Dynatrace AppEngine functionality.</p>\n<p>https://developer.dynatrace.com/develop/sdks/</p>\n<p>It consists of the following:</p>\n<ul>\n<li>TypeScript packages focused on specific use cases to use Dynatrace platform functionality.</li>\n<li>Modular clients for each Dynatrace platform service to reduce overhead on a specific use.</li>\n</ul>\n<h3 id=\"executingdqlquerieswithinjscodeactions\">Executing DQL Queries within JS Code Actions</h3>\n<p>While there is a DQL workflow action type, it may be beneficial to execute a DQL query from within a JS code action.  This can be accomplished using the <code>queryExecutionClient</code> from the <code>dynatrace-sdk/client-query</code> package.</p>\n<p>https://developer.dynatrace.com/develop/sdks/client-query/#queryexecute</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">import</span> { queryExecutionClient } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@dynatrace-sdk/client-query&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// build the DQL query</span>\n  <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-query/#queryexecute</span>\n  <span class=\"hljs-keyword\">const</span> timeout = <span class=\"hljs-number\">60</span>;\n  <span class=\"hljs-keyword\">const</span> query = <span class=\"hljs-string\">&#x27;timeseries metric = avg(&#x27;</span> + metric + <span class=\"hljs-string\">&#x27;), by: {dimension}, from: now()-5m\\\n                  | filter dimension == &quot;&#x27;</span> + dimension + <span class=\"hljs-string\">&#x27;&quot;\\\n                  | summarize avg = avg(arrayAvg(metric))&#x27;</span>;\n\n  <span class=\"hljs-keyword\">const</span> query_response = <span class=\"hljs-keyword\">await</span> queryExecutionClient.queryExecute({ <span class=\"hljs-attr\">body</span>: { query, <span class=\"hljs-attr\">requestTimeoutMilliseconds</span>: timeout * <span class=\"hljs-number\">1000</span>, <span class=\"hljs-attr\">fetchTimeoutSeconds</span>: timeout  } });\n\n  <span class=\"hljs-comment\">// check if the query result is empty (unexpectedly)</span>\n  <span class=\"hljs-keyword\">if</span>(query_response.result.records.length == <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Query returned an empty result unexpectedly!&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> query_response.result;\n  }\n\n  <span class=\"hljs-keyword\">return</span> query_response.result;\n\n}\n</code></pre>\n<h3 id=\"credentialvaultaccessviasdk\">Credential Vault Access via SDK</h3>\n<p>During workflow execution, integration with external systems may require credentials.  Those credentials should be accessed securely from the credential vault and not static coded into the workflow itself.</p>\n<p>Credentials can be accessed using <code>credentialVaultClient</code> from the <code>dynatrace-sdk/client-classic-environment-v2</code> package.</p>\n<p>When a credential is obtained, it contains the <code>token</code> value or the <code>username</code> and <code>password</code> values respectively.</p>\n<p>https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#getcredentialsdetails</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">import</span> { credentialVaultClient } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@dynatrace-sdk/client-classic-environment-v2&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// CREDENTIAL - the credential vault entity ID</span>\n  <span class=\"hljs-keyword\">const</span> CREDENTIAL = <span class=\"hljs-string\">&quot;CREDENTIALS_VAULT-ABC1235EEF8F36FD&quot;</span>;\n\n  <span class=\"hljs-comment\">// get the credentials from the credential vault using the SDK</span>\n  <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#getcredentialsdetails</span>\n  <span class=\"hljs-keyword\">const</span> data = (<span class=\"hljs-keyword\">await</span> credentialVaultClient.getCredentialsDetails({<span class=\"hljs-attr\">id</span>: CREDENTIAL}));\n  <span class=\"hljs-keyword\">const</span> token = data[<span class=\"hljs-string\">&#x27;token&#x27;</span>];\n  <span class=\"hljs-keyword\">const</span> username = data[<span class=\"hljs-string\">&#x27;username&#x27;</span>];\n  <span class=\"hljs-keyword\">const</span> password = data[<span class=\"hljs-string\">&#x27;password&#x27;</span>];\n\n}\n</code></pre>\n<h3 id=\"metricingestviasdk\">Metric Ingest via SDK</h3>\n<p>Data ingest is a common use case for workflows.  Logs, traces, events, and metrics can all be ingested during workflow execution.</p>\n<p>Metric ingestion is possible with the <code>metricsClient</code> from the <code>dynatrace-sdk/client-classic-environment-v2</code> package.</p>\n<p>https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#ingest-1</p>\n<p>The metric ingest utilizes the metric line protocol format:</p>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/extend-metrics/reference/metric-ingestion-protocol</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">import</span> { metricsClient } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@dynatrace-sdk/client-classic-environment-v2&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// build the line_protocol string to ingest the metric data point</span>\n  <span class=\"hljs-keyword\">const</span> line_protocol = <span class=\"hljs-string\">&#x27;metric&#x27;</span> + <span class=\"hljs-string\">&#x27;,dimension-name=dimension-value&#x27;</span> + <span class=\"hljs-string\">&#x27; value&#x27;</span>; <span class=\"hljs-comment\">// mymetric,team=teamA,businessapp=hr 1000</span>\n\n  <span class=\"hljs-comment\">// ingest the metric data point using the SDK</span>\n  <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#ingest-1</span>\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> metricsClient.ingest({\n    <span class=\"hljs-attr\">body</span>: line_protocol,\n  });\n\n}\n</code></pre>\n<h3 id=\"eventingestionandalertingviasdk\">Event Ingestion (and Alerting) via SDK</h3>\n<p>Generating alerts (events, problem events) is a common use case for workflows.</p>\n<p>Events can be ingested/created using the <code>eventsClient</code> from the <code>dynatrace-sdk/client-classic-environment-v2</code> package.</p>\n<p>https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#createevent</p>\n<p>There multiple event types that can be created via the <code>EventIngestEventType</code> class:</p>\n<p>https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#eventingesteventtype</p>\n<pre><code class=\"hljs js language-js\"><span class=\"hljs-keyword\">import</span> { eventsClient, EventIngestEventType } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@dynatrace-sdk/client-classic-environment-v2&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#createevent</span>\n  <span class=\"hljs-keyword\">const</span> event_response = <span class=\"hljs-keyword\">await</span> eventsClient.createEvent({\n    <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#eventingest</span>\n    <span class=\"hljs-attr\">body</span> : {\n      <span class=\"hljs-attr\">eventType</span>: EventIngestEventType.CustomAlert, <span class=\"hljs-comment\">// https://developer.dynatrace.com/develop/sdks/client-classic-environment-v2/#eventingesteventtype</span>\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Event Title&#x27;</span>,\n      <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">5</span>,\n      <span class=\"hljs-attr\">properties</span>: {\n        <span class=\"hljs-string\">&#x27;property-1&#x27;</span>: value,\n        <span class=\"hljs-string\">&#x27;property-2&#x27;</span>: <span class=\"hljs-string\">&#x27;value&#x27;</span>,\n      }\n    }\n  });\n\n}\n</code></pre>","activityList":[]}]